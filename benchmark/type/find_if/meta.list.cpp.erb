// Copyright Bruno Dutra 2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <meta/meta.hpp>

template <int X>
struct equals_to {
    template<typename Y>
    using invoke = meta::bool_<X == Y::type::value>;
};

<% env[:k].times do |k| %>

<% ints = ((k*n+1)..(k*n+n)).to_a %>

using <%= "xs#{k}" %> = meta::list<
    <%= ints.map { |i| "meta::int_<#{i}>" }.join(', ') %>
>;

#if defined(METABENCH)
using <%= "result#{k}" %> = meta::find_if<<%= "xs#{k}" %>, equals_to<<%= ints.last || 0 %>>>;
#endif

<% end %>

int main() {}
