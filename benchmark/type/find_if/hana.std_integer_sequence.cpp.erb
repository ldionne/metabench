// Copyright Louis Dionne 2013-2016
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#include <boost/hana/ext/std/integer_sequence.hpp>
#include <boost/hana/integral_constant.hpp>
#include <boost/hana/find_if.hpp>

#include <type_traits>
#include <utility>
namespace hana = boost::hana;


template <int X>
struct equals_to {
    template<typename Y>
    constexpr hana::bool_<X == Y::value> operator()(Y const&) const;
};

int main() {
<% env[:k].times do |k| %>
    <% ints = ((k*n+1)..(k*n+n)).to_a %>
    constexpr auto <%= "xs#{k}" %> = std::integer_sequence<
        <%= (["int"] + ints).join(', ') %>
    >{};

#if defined(METABENCH)
    constexpr auto <%= "result#{k}" %> = hana::find_if(<%= "xs#{k}" %>, equals_to<<%= ints.last || 0 %>>{});
#endif
<% end %>
}
