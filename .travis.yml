# Copyright Louis Dionne 2016
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

language: cpp
os: linux
sudo: false

# Do not build branches of the form "pr/*". By prefixing pull requests coming
# from branches inside the repository with pr/, this avoids building both the
# branch push _and_ the pull request.
branches:
  except: /pr\/.*/

cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/boost-1.63.0 # Keep this in sync with BOOST_VERSION

addons:
  apt:
    packages:
      - ninja-build
      - clang-3.6
      - clang-3.7
      - clang-3.8
      - g++-4.8
      - g++-4.9
      - g++-5
      - g++-6

    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.6
      - llvm-toolchain-precise-3.7
      - llvm-toolchain-precise-3.8
      - llvm-toolchain-precise

env:
  global:
    # GitHub token for pushing the benchmarks. The token is stored in the
    # ${GITHUB_TOKEN} environment variable.
    - secure: "TY3VQ9eOoYxiBvP6kR+WyE0pgJ5vmxgXhCqjhGPWiieKn3H8hUhhbacSnmODXJQ89jbcIgLxUSPSWq3ZAJNDPem0nyEfoBklnJFq7IrZ1sXZ3ywBcHHEq/09+LTsjElg+9NU6HRMmzuT1WCG76/KmQHL7THSjQoPKHLAbHLuTzWeMVzC1qB0JC/SsfFXmuB0ZCNIQsu6P9ADLUpUgjm1mEXiUIDIXtfFPUvhC7UCC+kw5OR4rmwWM0adzFJglA2gom73fxkX9O/qPtZh6nroV7Vu6cUsbTjmW7YlV+0Us5YWgulC7dJqAO8GrHbfk35n3unMs2ScJ4nzWVEFCwCFiMOWb8VWIPRSQXDjuxkc1Cuf8A2M6FnFqZqhXE2JlsUfVAgI7zrG5LytYJkJxxphV4Hbkf0gTJ8VdA6dHV69AX8BIcszhCPo2PdMRvA+3iAL8FIMopVtDDcra8glO8JsFsR6C5ptdXMpDZ2/KMvoZta8Rpk38YEsiwf9mI7vBDV5okWM071U1jbVDGc8FIDfC14xIwFy7WFOWtZA4KYQTS5PxqEyPxtIRNNdWfCiNcNmm4eozw/kSmcYzMQxheWTx2Wv9V7EdKcx1r7mmv/MXzGnKLRW4j5I7VbG3pMXWr2KA5+qQdnYRjK/xa0j1aOD1OWwE4Fzt4ETkVGzZ8dvFm8="

  matrix:
    - COMPILER=clang++-3.6 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=clang++-3.6 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=clang++-3.7 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=clang++-3.7 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=clang++-3.8 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=clang++-3.8 CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=g++-4.8     CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=g++-4.8     CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=g++-4.9     CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=g++-4.9     CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=g++-5       CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=g++-5       CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type
    - COMPILER=g++-6       CMAKE_GENERATOR="Unix Makefiles" CATEGORY=hetero
    - COMPILER=g++-6       CMAKE_GENERATOR="Unix Makefiles" CATEGORY=type

    # Also test on ninja
    - COMPILER=clang++-3.8 CMAKE_GENERATOR="Ninja"

install:
  - export CXX=${COMPILER} # Override CXX set by Travis
  - ${CXX} --version

  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # Install a recent CMake
  - CMAKE_URL="http://www.cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
  - mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  - export PATH=${DEPS_DIR}/cmake/bin:${PATH}
  - cmake --version

  # Install libc++ and libc++abi if needed
  - |
    if [[ "${CXX}" == "clang++-3.6" || "${CXX}" == "clang++-3.7" || "${CXX}" == "clang++-3.8" ]]; then
      if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
      elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
      elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1"; fi

      LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
      LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
      LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"

      mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
      travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
      travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
      travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
      (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${DEPS_DIR}/llvm/install)
      (cd llvm/build/projects/libcxx && make install -j2)
      (cd llvm/build/projects/libcxxabi && make install -j2)

      export CXXFLAGS="-nostdinc++ -isystem ${DEPS_DIR}/llvm/install/include/c++/v1"
      export LDFLAGS="-L ${DEPS_DIR}/llvm/install/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${DEPS_DIR}/llvm/install/lib"
    fi

  # Install Boost headers
  - BOOST_VERSION=1.63.0
  - BOOST_DIR=${DEPS_DIR}/boost-${BOOST_VERSION}
  - |
    if [[ -z "$(ls -A ${BOOST_DIR})" ]]; then
      BOOST_URL="http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.gz"
      mkdir -p ${BOOST_DIR}
      { travis_retry wget -O - ${BOOST_URL} | tar --strip-components=1 -xz -C ${BOOST_DIR}; } || exit 1
    fi

  # Install and use a more recent Ruby
  - rvm use 2.1 --install --binary --fuzzy
  - ruby --version

before_script:
  # Set the git identity (for pushing the benchmarks)
  - git config --global user.name "Travis bot"
  - git config --global user.email "<>"

  - cd ${TRAVIS_BUILD_DIR}
  - (mkdir build && cd build && cmake .. -DBOOST_ROOT=${BOOST_DIR})

script:
  - cmake --build build

  - |
    if [[ "${TRAVIS_EVENT_TYPE}" != "cron" ]]; then
      (cd build && ctest --output-on-failure -j3)
    fi

  # During nightly builds, we generate the benchmarks and update the gh-pages
  # branch with the data.
  - |
    if [[ "${TRAVIS_EVENT_TYPE}" == "cron" && "${CATEGORY}" != "" ]]; then
      cmake --build build --target benchmark.${CATEGORY} &&

      # Suppress output to avoid leaking the token when the command fails
      git clone https://ldionne:${GITHUB_TOKEN}@github.com/ldionne/metabench --depth 1 --branch=gh-pages tmp &>/dev/null &&
      rm -rf tmp/_${CATEGORY}/${COMPILER} &&
      rsync -am --include '*/' --include '*.html' --include '*.json' --exclude '*' build/benchmark/${CATEGORY}/ tmp/_${CATEGORY}/${COMPILER} &&

      # Add a YAML front matter to every chart and every JSON file (for Jekyll).
      for chart in tmp/_${CATEGORY}/${COMPILER}/*/*.html; do
        sed -i -e "1i---" -e "1itimestamp: $(date '+%a, %-d %b %Y')" -e "1icompiler: ${COMPILER}" -e "1i---" ${chart}
      done &&
      for dataset in tmp/_${CATEGORY}/${COMPILER}/*/*.json; do
        sed -i -e "1i---" -e "1i---" ${dataset}
      done &&

      pushd tmp &&
      git add --all . &&
      git commit -m "Update '${CATEGORY}' benchmarks for compiler '${COMPILER}'" &&
      # Suppress output to avoid leaking the token
      travis_retry git push origin gh-pages &>/dev/null &&
      popd
    fi
